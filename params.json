{
  "name": "Peppermint",
  "tagline": "Provides a bit of C# syntactic sugar",
  "body": "ï»¿## Synopsis\r\n\r\n[![Peppermint](https://github.com/another-guy/Peppermint/raw/master/Peppermint.png)](https://github.com/another-guy/Peppermint)\r\n\r\nProvides a bit of C# syntactic sugar\r\n\r\n## Code Example\r\n\r\nStringToEnumExtension:\r\n\r\n```cs\r\nenum MyEnum\r\n{\r\n  One = 1,\r\n  Two = 2\r\n}\r\n\r\nstring @string = \"One\";\r\nMyEnum value = @string.Parse<MyEnum>();\r\n```\r\n\r\nDictionaryExtensions:\r\n```cs\r\nIDictionary<string, object> dict = null;\r\ndict = dict.NullToEmpty();\r\nvar size = dict.Count; // size == 0, no exception here.\r\n```\r\n\r\nIEnumerableExtensions:\r\n```\r\nnew int[] { 1, 2, 3, 4, 5 }\r\n\t.TakeProject(\r\n\t\titem => item % 2 == 0,\r\n\t\titem => $\"{item} Mississippi\"); // ->  { \"2 Mississippi\", \"4 Mississippi\" }\r\n\t\t\r\n\t\t\r\nnew int[] { 1, 2, 3, 4, 5 }\r\n\t.SkipProject(\r\n\t\titem => item > 2,\r\n\t\titem => $\"{item} Mississippi\"); // ->  { \"1 Mississippi\", \"2 Mississippi\" }\r\n\t\t\r\nnew int[] { 1, 2 }\r\n\t.TakeProjectMany(\r\n\t\titem => item < 2,\r\n\t\titem => new int[] { item, item, item }); // ->  { 1, 1, 1 }\r\n\t\t\r\nnew int[] { 1, 2 }\r\n\t.SkipProjectMany(\r\n\t\titem => item < 2,\r\n\t\titem => new int[] { item, item, item }); // ->  { 2, 2, 2 }\r\n```\r\n\r\nArrayExtensions:\r\n```cs\r\nstring[] array = null;\r\narray = array.NullToEmpty();\r\nvar length = array.Length; // length == 0, no exception here.\r\n```\r\n\r\nListExtensions:\r\n```cs\r\nstring[] ints = new[] { \"Alice\", \"Bob\" };\r\nlist.SwapAt(0, 1); // Swaps items in place. The array is now []{ \"Bob\", \"Alice\" }\r\n```\r\n\r\nSequence:\r\n```cs\r\n// Other sequence types or even custom sequence generators can be used.\r\nvar integers = Sequence\r\n\t.WithoutDuplicates(Sequence.NaturalNumbers)\r\n\t.Take(5)\r\n\t.ToList(); // Results in a List<int>() { 1, 2, 3, 4, 5 }\r\n\r\n// Sequence start number and sequence step can be explicitly provided if necessary.\r\n```\r\n\r\n## Motivation\r\n\r\nSyntax sugar is syntax sugar: it's not a necessary thing per se but it can improve code quality.\r\n\r\n## Installation\r\n\r\nPeppermint is a available in a form of a NuGet package.\r\nFollow regular installation process to bring it to your project.\r\nhttps://www.nuget.org/packages/Peppermint/\r\n\r\n## Tests\r\n\r\nUnit tests are available in Peppermint.Tests project.\r\n\r\n## License\r\n\r\nThe code is distributed under the MIT license.\r\n\r\n## Reporting an Issue\r\n\r\nReporting an issue, proposing a feature, or asking a question are all great ways to improve software quality.\r\n\r\nHere are a few important things that package contributors will expect to see in a new born GitHub issue:\r\n* the relevant version of the package;\r\n* the steps to reproduce;\r\n* the expected result;\r\n* the observed result;\r\n* some code samples illustrating current inconveniences and/or proposed improvements.\r\n\r\n## Contributing\r\n\r\nContribution is the best way to improve any project!\r\n\r\n1. Fork it!\r\n2. Create your feature branch (```git checkout -b my-new-feature```).\r\n3. Commit your changes (```git commit -am 'Added some feature'```)\r\n4. Push to the branch (```git push origin my-new-feature```)\r\n5. Create new Pull Request\r\n\r\n...or follow steps described in a nice [fork guide](http://kbroman.org/github_tutorial/pages/fork.html) by Karl Broman\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}